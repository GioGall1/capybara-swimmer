using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif

public class ChunkSpawner : MonoBehaviour
{
    [Header("Spawn Settings")]
    [Tooltip("Prefab —á–∞–Ω–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ useResources = false)")]
    public GameObject chunkPrefab;

    [Tooltip("–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî –ø—Ä–µ—Ñ–∞–± –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–∞–ø–∫–∏ Resources –ø–æ –ø—É—Ç–∏ –Ω–∏–∂–µ")]
    public bool useResources = false;

    [Tooltip("–ü—É—Ç—å –≤–Ω—É—Ç—Ä–∏ Resources –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä 'Prefabs/Chunk/Chunk_100'")]
    public string resourcesPath = "";

    [Tooltip("–ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ—Ñ–∞–±–æ–≤ ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏ –ø—É—Ç–∏ –≤–Ω—É—Ç—Ä–∏ Resources. –ï—Å–ª–∏ –ø—É—Å—Ç–æ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω 'resourcesPath'.")]
    public string[] resourcePaths;

    [Tooltip("–ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —á–∞–Ω–∫ –ø–æ–¥—Ä—è–¥ –ø—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–º –≤—ã–±–æ—Ä–µ –∏–∑ —Å–ø–∏—Å–∫–∞")] 
    public bool avoidImmediateRepeat = true;

    private GameObject _lastPrefabAsset;

    public Vector2 spawnOffset = new Vector2(0f, -100f);
    public bool spawnNextOnStart = false;
    [SerializeField] private float immediateCleanupMargin = 5f;

    private bool hasSpawned = false;

    private void Awake()
    {
        // üîπ –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º Resources ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (useResources)
        {
            bool hasList = resourcePaths != null && resourcePaths.Length > 0;
            bool hasSingle = !string.IsNullOrEmpty(resourcesPath);

            if (!hasList && !hasSingle)
            {
                Debug.LogError("[ChunkSpawner] useResources=ON, –Ω–æ –Ω–µ –∑–∞–¥–∞–Ω –Ω–∏ Resources Path, –Ω–∏ —Å–ø–∏—Å–æ–∫ resourcePaths.");
                enabled = false; return;
            }

            // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø—É—Ç—å ‚Äî –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–º, —á—Ç–æ–±—ã –æ—Ç–ª–æ–≤–∏—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏ —Ä–∞–Ω—å—à–µ
            if (!hasList && hasSingle)
            {
                var loaded = Resources.Load<GameObject>(resourcesPath);
                if (loaded == null)
                {
                    Debug.LogError($"[ChunkSpawner] Resources.Load('{resourcesPath}') –≤–µ—Ä–Ω—É–ª null. –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–∞ –ø–æ–¥ Assets/Resources.");
                    enabled = false; return;
                }
                chunkPrefab = loaded; // —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
                _lastPrefabAsset = null; // —Å–±—Ä–æ—Å
                Debug.Log($"[ChunkSpawner] –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–µ—Ñ–∞–± –∏–∑ Resources: {resourcesPath}");
            }
        }
        else
        {
            // üîπ —Ä–µ–∂–∏–º —Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ asset-–ø—Ä–µ—Ñ–∞–±
            if (chunkPrefab == null)
            {
                Debug.LogError("[ChunkSpawner] Chunk Prefab –Ω–µ –∑–∞–¥–∞–Ω!");
                enabled = false; return;
            }
            if (chunkPrefab.scene.IsValid())
            {
                Debug.LogError("[ChunkSpawner] 'Chunk Prefab' —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ–±—ä–µ–∫—Ç —Å—Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π prefab-asset –∏–ª–∏ –≤–∫–ª—é—á–∏ useResources.");
                enabled = false; return;
            }
        }
    }

    private void OnEnable() => hasSpawned = false;

    private void Start()
    {
        if (spawnNextOnStart)
            SpawnNextChunk();
    }

    private GameObject PickPrefabAsset()
    {
        if (useResources)
        {
            // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π ‚Äì –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π, –∏–∑–±–µ–≥–∞—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–∞
            if (resourcePaths != null && resourcePaths.Length > 0)
            {
                int tries = Mathf.Max(1, resourcePaths.Length * 2);
                for (int a = 0; a < tries; a++)
                {
                    int idx = Random.Range(0, resourcePaths.Length);
                    var path = resourcePaths[idx];
                    if (string.IsNullOrEmpty(path)) continue;
                    var loaded = Resources.Load<GameObject>(path);
                    if (loaded == null) continue;
                    if (avoidImmediateRepeat && _lastPrefabAsset == loaded && resourcePaths.Length > 1)
                        continue; // –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π
                    _lastPrefabAsset = loaded;
                    return loaded;
                }
                // –§–æ–ª–±—ç–∫: –≤–µ—Ä–Ω—ë–º –ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ
                foreach (var path in resourcePaths)
                {
                    var loaded = string.IsNullOrEmpty(path) ? null : Resources.Load<GameObject>(path);
                    if (loaded != null) { _lastPrefabAsset = loaded; return loaded; }
                }
                return null;
            }
            // –ò–Ω–∞—á–µ ‚Äì –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø—É—Ç—å
            return Resources.Load<GameObject>(resourcesPath);
        }
        // –†–µ–∂–∏–º –±–µ–∑ Resources ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π asset
        return chunkPrefab;
    }

    private void OnTriggerEnter2D(Collider2D other)
    {
        if (!hasSpawned && other.CompareTag("Player"))
            SpawnNextChunk();
    }

    private void SpawnNextChunk()
    {
        hasSpawned = true;

        Vector2 currentChunkPos = transform.parent ? (Vector2)transform.parent.position : (Vector2)transform.position;
        Vector2 spawnPos = currentChunkPos + spawnOffset;

        // –í—ã–±–∏—Ä–∞–µ–º prefab-–∞—Å—Å–µ—Ç (–∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ –æ–¥–∏–Ω–æ—á–Ω–æ–º—É –ø—É—Ç–∏/–ø–æ–ª—é)
        var prefabToSpawn = PickPrefabAsset();
        if (prefabToSpawn == null || prefabToSpawn.scene.IsValid())
        {
            Debug.LogError("[ChunkSpawner] –°–ø–∞–≤–Ω –æ—Ç–º–µ–Ω—ë–Ω ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π prefab-–∞—Å—Å–µ—Ç.");
            return;
        }

        CleanupOldChunks(currentChunkPos.y);

        GameObject newChunk = Instantiate(prefabToSpawn, spawnPos, Quaternion.identity);
        int chunkId = newChunk.GetInstanceID();

        #if UNITY_EDITOR
        var path = PrefabUtility.GetPrefabAssetPathOfNearestInstanceRoot(newChunk);
        Debug.Log($"[ChunkSpawner] –°–æ–∑–¥–∞–Ω —á–∞–Ω–∫ {chunkId} –∏–∑ '{path}' –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {spawnPos}");
        #else
        Debug.Log($"[ChunkSpawner] –°–æ–∑–¥–∞–Ω —á–∞–Ω–∫ {chunkId} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {spawnPos}");
        #endif

        // –°–ø–∞–≤–Ω–∏–º —Ñ—Ä—É–∫—Ç—ã
        var fruitZones = newChunk.GetComponentsInChildren<FruitLineZoneTrigger>(true);
        foreach (var zone in fruitZones)
        {
            if (!zone) continue;
            zone.spawnOnPlayerEnter = false;
            zone.spawnOnlyOnce = true;
            zone.deterministic = false;
            zone.usePerChunkRandom = true;
            zone.ForceSpawn(chunkId);
        }
    }

    private void CleanupOldChunks(float currentChunkY)
    {
        var chunks = FindObjectsOfType<DestroyIfAbovePlayer>(true);
        int removed = 0;

        foreach (var ch in chunks)
        {
            if (!ch) continue;
            if (ch.transform.position.y > currentChunkY + immediateCleanupMargin)
            {
                Destroy(ch.gameObject);
                removed++;
            }
        }

        if (removed > 0)
            Debug.Log($"[ChunkSpawner] Cleanup: —É–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —á–∞–Ω–∫–æ–≤ = {removed}");
    }
}