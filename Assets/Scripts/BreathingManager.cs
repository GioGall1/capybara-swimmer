using UnityEngine;
using UnityEngine.Events;

public class BreathingManager : MonoBehaviour
{
    private const float maxBreath = 100f;
    private float currentBreath = maxBreath;
    private const float breathDecreaseRate = 1f;

    public UnityEvent<float> onBreathChanged;

    public static BreathingManager Instance { get; private set; }


    private bool isUnderwater = false;

    void Start()
    {
        currentBreath = maxBreath;
        onBreathChanged?.Invoke(currentBreath);
   
    }
    
   void Awake()
{
    if (Instance == null)
    {
        Instance = this;
        DontDestroyOnLoad(gameObject); // üí° —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏
    }
    else if (Instance != this)
    {
        Debug.LogWarning("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π BreathingManager —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è: " + gameObject.name);
        Destroy(gameObject); // —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª–∏—à–Ω–∏–π
    }
}

    public void StartBreathing()
    {
        Debug.Log("ü´Å StartBreathing –≤—ã–∑–≤–∞–Ω!");

        if (isUnderwater)
        {
            Debug.Log("‚õî –£–∂–µ –ø–æ–¥ –≤–æ–¥–æ–π, –≤—ã—Ö–æ–¥–∏–º –∏–∑ StartBreathing");
            return;
        }

        isUnderwater = true;
        Debug.Log("‚úÖ –î—ã—Ö–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ");
        InvokeRepeating(nameof(DecreaseBreath), 1f, 1f);

    }

    public void StopBreathing()
    {
        if (!isUnderwater) return;

        isUnderwater = false;
        CancelInvoke(nameof(DecreaseBreath));
    }

    void DecreaseBreath()
    {

    if (!isUnderwater) return;

    currentBreath -= breathDecreaseRate;
    currentBreath = Mathf.Clamp(currentBreath, 0f, maxBreath);


    onBreathChanged?.Invoke(currentBreath);

    if (currentBreath <= 0f)
    {
        Debug.Log("‚ùó –ö–∞–ø–∏–±–∞—Ä–∞ –∑–∞–¥—ã—Ö–∞–µ—Ç—Å—è!");
    }
    }

    public void RefillBreath(float amount)
    {
         Debug.Log($"–î–æ: {currentBreath}");

        currentBreath += amount;
        currentBreath = Mathf.Clamp(currentBreath, 0f, maxBreath);

        Debug.Log($"–ü–æ—Å–ª–µ: {currentBreath}");
Debug.Log($"ü´ß –ü—É–∑—ã—Ä—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –¥—ã—Ö–∞–Ω–∏–µ –Ω–∞ {amount}%. –¢–µ–∫—É—â–µ–µ –¥—ã—Ö–∞–Ω–∏–µ: {Mathf.RoundToInt(currentBreath)}%");
        onBreathChanged?.Invoke(currentBreath); // <<< –≤–æ—Ç —ç—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI

    }
}