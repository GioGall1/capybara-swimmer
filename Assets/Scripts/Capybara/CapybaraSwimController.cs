using System.Collections;
using UnityEngine;

[RequireComponent(typeof(Rigidbody2D))]
public class CapybaraSwimController : MonoBehaviour
{
    public float moveSpeed = 2f;
    public float verticalSpeed = 1.5f;
    public float rotationFixSpeed = 8f; // ‚úÖ —Å–∫–æ—Ä–æ—Å—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞
    public float boostedVerticalSpeed = 10f;   // ü•• —É—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç –∫–æ–∫–æ—Å–∞
    public float boostDuration = 5f;          // ‚è±Ô∏è —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è —É—Å–∫–æ—Ä–µ–Ω–∏–µ
    public float coconutBoostForce = 10f;
    public GameObject bubblePrefab;
    public Transform mouthPoint;
    public float bubbleSpawnIntervalMin = 1.5f;
    public float bubbleSpawnIntervalMax = 4f;
    public int boostBubbleCount = 10;
    public float bubbleSpread = 0.5f;   

    private Rigidbody2D rb;
    private Vector2 moveDirection;
    private Coroutine boostCoroutine;
    private Animator anim;
    private float nextBubbleTime = 0f;
    private float originalVerticalSpeed;



    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        rb.gravityScale = 1.2f;
        // originalVerticalSpeed = verticalSpeed;
        anim = GetComponent<Animator>();
        this.enabled = false; // ‚ùå –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ
        
        originalVerticalSpeed = verticalSpeed; // üß† –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        
    }

    // ‚úÖ –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    public void ActivateAfterDelay(float delay)
    {
        Invoke(nameof(EnableControl), delay);
    }

    void EnableControl()
    {
        rb.gravityScale = 1.2f;
        this.enabled = true;
    }

    void Update()
    {
        float horizontal = 0f;

#if UNITY_EDITOR
        if (Input.GetMouseButton(0))
        {
            horizontal = Input.mousePosition.x < Screen.width / 2 ? -1f : 1f;
            Flip(horizontal);
        }
#else
    if (Input.touchCount > 0)
    {
        Touch touch = Input.GetTouch(0);
        horizontal = touch.position.x < Screen.width / 2 ? -1f : 1f;
        Flip(horizontal);
    }
#endif

        // –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑ (–≤—Å–µ–≥–¥–∞) + –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ (–µ—Å–ª–∏ –Ω–∞–¥–æ)
        moveDirection = new Vector2(horizontal * moveSpeed, -verticalSpeed);

        if (Time.time >= nextBubbleTime)
    {
        SpawnBubble();
        nextBubbleTime = Time.time + Random.Range(bubbleSpawnIntervalMin, bubbleSpawnIntervalMax);
    }
    }

    void FixedUpdate()
    {

        rb.velocity = moveDirection;

        // ‚úÖ –∫–∞–ø–∏–±–∞—Ä–∞ –≤—Å–µ–≥–¥–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è (–ø–ª–∞–≤–Ω–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è)
        Quaternion targetRotation = Quaternion.identity;
        transform.rotation = Quaternion.Lerp(transform.rotation, targetRotation, rotationFixSpeed * Time.fixedDeltaTime);
    }

    void Flip(float direction)
    {
        Vector3 scale = transform.localScale;
        scale.x = direction < 0 ? -Mathf.Abs(scale.x) : Mathf.Abs(scale.x);
        transform.localScale = scale;
    }
    
    void SpawnBubble()
    {
        Instantiate(bubblePrefab, mouthPoint.position, Quaternion.identity);
    }
    

    public void ApplyCoconutBoost()
    {
        Debug.Log("üêπ –í—ã–∑–≤–∞–Ω ApplyCoconutBoost!");

        anim.SetTrigger("Boost"); // üí• –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É—Å–∫–æ—Ä–µ–Ω–∏—è
        
        ApplyBoostBubbles();

        if (boostCoroutine != null)
        {
            StopCoroutine(boostCoroutine);
            verticalSpeed = originalVerticalSpeed;         // üßº —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ—à–ª–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
            anim.SetBool("isBoosting", false);             // ‚õî —Å–±—Ä–æ—Å –ø—Ä–æ—à–ª–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        }

        anim.SetBool("isBoosting", true); // ‚úÖ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é

        boostCoroutine = StartCoroutine(BoostVerticalSpeed());
    }
    
    private void ApplyBoostBubbles()
{
    for (int i = 0; i < boostBubbleCount; i++)
    {
        Vector3 offset = new Vector3(Random.Range(-bubbleSpread, bubbleSpread), 0f, 0f);
        GameObject bubble = Instantiate(bubblePrefab, mouthPoint.position + offset, Quaternion.identity);
        
        Rigidbody2D rb = bubble.GetComponent<Rigidbody2D>();
        if (rb != null)
        {
            float forceY = Random.Range(2f, 4f);
            rb.velocity = new Vector2(0f, forceY); // –≤—Å–ø–ª—ã—Ç–∏–µ
        }

        Destroy(bubble, 2f); // –ø—É–∑—ã—Ä—å –∏—Å—á–µ–∑–∞–µ—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    }
}

private IEnumerator BoostVerticalSpeed()
    {
        float original = verticalSpeed;
        verticalSpeed = boostedVerticalSpeed;
        Debug.Log("ü•• –ö–æ–∫–æ—Å: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ " + verticalSpeed);

        yield return new WaitForSeconds(boostDuration);

        verticalSpeed = original;

        anim.SetBool("isBoosting", false); // ‚úÖ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ

        Debug.Log("üßò –ö–æ–∫–æ—Å —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: " + verticalSpeed);
    }
}