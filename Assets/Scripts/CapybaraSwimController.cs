using System.Collections;
using UnityEngine;

[RequireComponent(typeof(Rigidbody2D))]
public class CapybaraSwimController : MonoBehaviour
{
    public float moveSpeed = 2f;
    public float verticalSpeed = 1.5f;
    public float rotationFixSpeed = 8f; // ‚úÖ —Å–∫–æ—Ä–æ—Å—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞
    public float boostedVerticalSpeed = 10f;   // ü•• —É—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç –∫–æ–∫–æ—Å–∞
    public float boostDuration = 5f;          // ‚è±Ô∏è —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è
    public float coconutBoostForce = 10f;

    private Rigidbody2D rb;
    private Vector2 moveDirection;
    private Coroutine boostCoroutine;



    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        rb.gravityScale = 1.2f;
        // originalVerticalSpeed = verticalSpeed;
        this.enabled = false; // ‚ùå –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ
    }

    // ‚úÖ –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    public void ActivateAfterDelay(float delay)
    {
        Invoke(nameof(EnableControl), delay);
    }

    void EnableControl()
    {
        rb.gravityScale = 1.2f;
        this.enabled = true;
    }

    void Update()
    {
        float horizontal = 0f;

#if UNITY_EDITOR
        if (Input.GetMouseButton(0))
        {
            horizontal = Input.mousePosition.x < Screen.width / 2 ? -1f : 1f;
            Flip(horizontal);
        }
#else
    if (Input.touchCount > 0)
    {
        Touch touch = Input.GetTouch(0);
        horizontal = touch.position.x < Screen.width / 2 ? -1f : 1f;
        Flip(horizontal);
    }
#endif

        // –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑ (–≤—Å–µ–≥–¥–∞) + –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ (–µ—Å–ª–∏ –Ω–∞–¥–æ)
        moveDirection = new Vector2(horizontal * moveSpeed, -verticalSpeed);
    }

    void FixedUpdate()
    {

        rb.velocity = moveDirection;

        Debug.Log("üîΩ rb.velocity.y = " + rb.velocity.y);

        // ‚úÖ –∫–∞–ø–∏–±–∞—Ä–∞ –≤—Å–µ–≥–¥–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è (–ø–ª–∞–≤–Ω–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è)
        Quaternion targetRotation = Quaternion.identity;
        transform.rotation = Quaternion.Lerp(transform.rotation, targetRotation, rotationFixSpeed * Time.fixedDeltaTime);
    }

    void Flip(float direction)
    {
        Vector3 scale = transform.localScale;
        scale.x = direction < 0 ? -Mathf.Abs(scale.x) : Mathf.Abs(scale.x);
        transform.localScale = scale;
    }
    

    public void ApplyCoconutBoost()
{
    Debug.Log("üêπ –í—ã–∑–≤–∞–Ω ApplyCoconutBoost!");
    if (boostCoroutine != null)
        StopCoroutine(boostCoroutine);

    boostCoroutine = StartCoroutine(BoostVerticalSpeed());
}

private IEnumerator BoostVerticalSpeed()
{
    float original = verticalSpeed;
    verticalSpeed = boostedVerticalSpeed;
    Debug.Log("ü•• –ö–æ–∫–æ—Å: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ " + verticalSpeed);

    yield return new WaitForSeconds(boostDuration);

    verticalSpeed = original;
    Debug.Log("üßò –ö–æ–∫–æ—Å —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: " + verticalSpeed);
}
}